<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>SpringHello</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

<!-- 1. 추가하기 -->
<!-- 
클라이언트의 요청을 전달 받는다. 
컨트롤러에게 클라이언트의 요청을 전달하고, 
컨트롤러가 리턴한 결과 값을 View에 전달하여 알맞은 응답을 생성하도록 한다.
 -->
 
 <!-- servlet -->
 <!-- Common Gateway Interface -->
 <!-- 클라이언트(View) 요청을 처리하고 그 결과를 다시 클라이언트에게 전송하는  -->
 <!-- Servelt 클래스 구현 규칙을 지킨 자바 프로그램 -->
 
 <!-- 
 ★ Servlet 개념
서블릿이란 자바 기반으로 만드는 웹 어플리케이션 프로그래밍 기술
자바로 구현 된 CGI(Common Gateway Interface) 라고들 흔히 말한다.
Interface : 서로 연결되어 동작하기 위한  물리적 접점이다
클라이언트(View) 요청을 처리하고 그 결과를 다시 클라이언트에게 전송하는 Servelt 클래스 구현 규칙을 지킨 자바 프로그램.
웹 서버의 web.xml 파일에 서블릿 클래스와 URL을 함께 등록하여 사용 
(하지만 현재는 어노테이션을 사용하여 URL 맵핑) 
(웹 서버에 있는 web.xml파일은 서블릿 클래스와 URL이 묶음으로 등록. 그래야만 URL로 해당 서블릿 클래스를 찾아서 작동할 수 있기 때문)
웹 브라우저로부터 web.xml 파일에 등록한 URL을 요청받으면 해당 url과 함께 묶음 등록된 서블릿 클래스를 찾아 서버 쪽에서 작동되고 그 결과를 웹 브라우저로 전송.

★ Servlet 특징
동적 웹어플리케이션 컴포넌트.
.java 확장자.
클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용.
java thread이용하여 동작.
MVC패턴에서 Controller로 이용됨.
  -->
 
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.do</url-pattern>
		<url-pattern>/game/*</url-pattern>
	</servlet-mapping>
<!-- 여기까지 -->

<!-- 
CharacterEncodingFilter Class를 설정함으로써 
요청 파라미터의 캐릭터 인코딩을 손쉽게 설정
 -->
	<filter>
			<filter-name>encodingFilter</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
			<init-param>
				<param-name>encoding</param-name>
				<param-value>UTF-8</param-value>
			</init-param>
		</filter>

		<filter-mapping>
			<filter-name>encodingFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>

<!-- 
	web.xml 파일에 한 개 이상의 DispatcherServlet을 설정할 수 있다.
 	한 개 이상의 설정 파일을 사용해야 하거나 기본 설정 파일 이름이 아닌 다른 이름의 설정 파일을 사용하고 싶은 경우 
 	다음과 같이 DispatcherServlet을 설정할 때 contextConfigLocation 초기화 파라미터에
	설정 파일 목록을 지정하면 된다.
 -->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
	classpath:common.xml
	</param-value>
</context-param>
<listener>
	<listener-class>
	org.springframework.web.context.ContextLoaderListener
	</listener-class>
</listener>

<!-- 
	서로 다른 DispatcherServlet이 공통 빈을 필요로 하는 경우,
	ContextLoaderListener를 사용하여 공통으로 사용될 빈을 정할 수 있게 된다. 
	다음과 같이 ContextLoaderListener를 ServletListener로 등록하고 
	contextConfigLocation 컨텍스트 파라미터를 이용하여 
	공통으로 사용될 빈 정보를 담고 있는 설정 파일 목록을 지정하면 된다.
 -->
</web-app>